
platform 平台设备驱动模型

struct bus_type platform_bus_type = {
	.name		= "platform",
	.match		= platform_match,
	....
};

static int platform_match(struct device *dev, struct device_driver *drv)
{
	struct platform_device *pdev;

	pdev = container_of(dev, struct platform_device, dev);
	return (strncmp(pdev->name, drv->name, BUS_ID_SIZE) == 0);
}

//match根据平台设备的name与平台驱动的driver成员的name比较, 一致的话则认为匹配成功

//平台设备
<linux/platform_device.h>
struct platform_device {
	const char	* name; //总线match时使用
	int		id;     //如多个设备共用一个驱动时， id不能一样
	struct device	dev;    //dev.platform_data可以挂自定义的数据,
				  dev里的release成员要实现
				  dev.driver_data也可以挂数据 

	u32		num_resources; //多少个资源
	struct resource	* resource;    //资源对象的始地址
};

/// 设备
<linux/ioport.h>
struct resource {
	resource_size_t start;   //32bit/64bit数值
	resource_size_t end;     //数值
	const char *name;       
	unsigned long flags;   
	struct resource *parent, *sibling, *child;
};

flags:
#define IORESOURCE_IO		0x00000100
#define IORESOURCE_MEM		0x00000200
#define IORESOURCE_IRQ		0x00000400
#define IORESOURCE_DMA		0x00000800

struct resource *platform_get_resource(struct platform_device *dev,
 	unsigned int type, unsigned int num)
//获取指定的资源 type为指定flags类型, num为同类型中的第几个资源

int platform_get_irq(struct platform_device *pdev, unsigned int num);
struct resource *platform_get_resource_byname(struct platform_device *dev,
					      unsigned int type, char *name)


int platform_device_register(struct platform_device *);
void platform_device_unregister(struct platform_device *);


//驱动
struct platform_driver {
	int (*probe)(struct platform_device *);
	int (*remove)(struct platform_device *);
	void (*shutdown)(struct platform_device *);
	int (*suspend)(struct platform_device *, pm_message_t state);
	int (*suspend_late)(struct platform_device *, pm_message_t state);
	int (*resume_early)(struct platform_device *);
	int (*resume)(struct platform_device *);

	struct device_driver driver; //driver里的name用于总线与设备匹配
	const struct platform_device_id *id_table;
};

int platform_driver_register(struct platform_driver *);
void platform_driver_unregister(struct platform_driver *);


