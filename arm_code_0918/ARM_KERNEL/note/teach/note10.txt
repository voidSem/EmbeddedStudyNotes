
中断分顶半部和底半部
	顶半部就是中断处理函数
	顶半部作实时性要求高的工作, 并安排实时性要求不高的工作任务在底半部完成

中断底半部的实现方法

#define in_irq()		(hardirq_count())   //如返回真表示在硬件中断处理函数里
#define in_softirq()		(softirq_count())   //判断是否在软件中断底半部函数里
#define in_interrupt()		(irq_count())       //判断是否在中断上下文内

1. 软件中断, 不是指swi
   是指用软件来实现中断向量表, 中断控制器等， 像硬件中断的功能.
   软件中断使用一个内核线程来轮询检查， 当软件中断发生的时则调用相应的
   注册函数. 线程在硬件中断完了之后得到调度

2. tasklet 是基于软件中断来实现的.
   注意因它还是处于中断状态下得到调度的， 所以不能长时间运行， 不能睡眠
   中断上下文  interrupt context
#include <linux/interrupt.h>
struct tasklet_struct
{
	struct tasklet_struct *next;
	unsigned long state;
	atomic_t count;
	void (*func)(unsigned long); //底半部要运行的函数
	unsigned long data;
};

#define DECLARE_TASKLET(name, func, data) \
struct tasklet_struct name = { NULL, 0, ATOMIC_INIT(0), func, data }


//初始化
   struct tasklet_struct mytask
   mytask.func = 要底半部执行的函数
   mytask.data = 给底半部执行函数的参数
或：   DECLARE_TASKLET(name, func, data); //定义一个对象并初始化
 	
  
  在中断的顶半部(中断处理函数)安排运行
	mytask.data = 999;
	tasklet_schedule(&mytask); //安排工作
	或者tasklet_hi_schedule(struct tasklet_struct *t) //高优先级别的软件中断


3. workqueue 是使用创建一个内核线程来处理的, 所以可以像用户程序一样睡眠
#include <linux/workqueue.h>

	struct work_struct mywork; //表示队列里的单项工作, 一个中断底半部的做的工作任务, 此作务在用户空间运行 
	struct workqueue_struct *myqueue; //表示一个队列, 队列里可装多项工作

   void mywork_func(struct work_struct *work); //单项工作的执行函数
   INIT_WORK(&mywork, mywork_func); //初始化
   myqueue = create_singlethread_workqueue("myqueue"); //创建一个内核线程出来， 用于调度加入此队列的工作
   在中断顶半部(中断处理函数)安排运行
	queue_work(myqueue, &mywork);

exit:
        cancel_work_sync(&mywork); 
        destroy_workqueue(myqueue);
	


4. 内核线程
    struct task_struct *kthread_create(int (*threadfn)(void *data),
				   void *data,
				   const char namefmt[], ...);//在模块初始化函数里创建内核线程

    再运行wake_up_process(内核线程对象地址)

  或者kthread_run(threadfn, data, namefmt, ...);

   int kthread_stop(struct task_struct *k); // 请求线程退出， 堵塞到线程退出为止
   int kthread_should_stop(void);           // 判断当前线程是否要退出
   
	//在线程代码里...
	while (1)
	{	
		if (kthread_should_stop())
			break;
		...
	}
